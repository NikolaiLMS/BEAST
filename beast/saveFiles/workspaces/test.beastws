{"cbmc_process_starter":{"path_to_vs_cmd_dev":"\"D:\\Visual studio\\Common7\\Tools\\VsDevCmd.bat\"","process_starter_type":"WINDOWS"},"test_config_list":[{"descr_uuid":"09c07e1e-db29-4a09-a892-eede5e11beb9","prop_descr_uuid":"a7897422-9212-40ff-b854-e89d33cd623a","name":"asd","cbmc_test_config":[{"max_seats":1,"start_runs_on_creation":false,"descr_uuid":"09c07e1e-db29-4a09-a892-eede5e11beb9","prop_descr_uuid":"a7897422-9212-40ff-b854-e89d33cd623a","max_voters":1,"name":"asd","max_cands":1,"min_cands":1,"min_seats":1,"test_runs":[{"amt_voter":1,"amt_cands":1,"amt_seats":1,"code_gen_options":{"amount_voter_var_name":"MAX_VOTERS","amount_cands_var_name":"MAX_CANDIDATES","amount_seats_var_name":"MAX_SEATS"},"cbmc_code_file":{"cbmc_test_run_cbmc_file_path":"D:\\code\\eclipse-workspace-new\\BEAST\\beast\\core\\generated_c_files\\bclj72a4ugogu0ccsjs5.c","cbmc_generated_code_info":{"code":"#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#define assume(x) __CPROVER_assume(x)\n#define INVALID_VOTE 0xFFFFFFFE\ntypedef struct VoteStruct { unsigned int votes[MAX_VOTERS][MAX_CANDIDATES];\nunsigned int amtVotes; } VoteStruct;\ntypedef struct VoteResultStruct { unsigned int result[MAX_CANDIDATES];\nunsigned int amtResult; } VoteResultStruct;\nunsigned int nondet_uint();\nint nondet_int();\nVoteResultStruct voting(VoteStruct voteStruct, unsigned int V, unsigned int C, unsigned int S)\n{\n unsigned int votes[MAX_VOTERS][MAX_CANDIDATES];\n\tfor (int i = 0; i < V; ++i) {\n \tfor (int j = 0; j < C; ++j) {\n     \tvotes[i][j] = voteStruct.votes[i][j];\n     }\n }\nunsigned int result[C];\n//user generated code\n    unsigned int i = 0;\n    unsigned int j = 0;\n\n    for (i = 0; i < C; i++) {\n        result[i] = 0;\n    }\n    for (i = 0; i < V; i++) {\n        for (j = 0; j < C; j++) {\n                result[votes[i][j]] += (C - j) - 1;\n        }\n    }\n//end user generated code\n\tVoteResultStruct resultStruct;\n\tresultStruct.amtResult == nondet_uint();\n assume(resultStruct.amtResult == C);\n\tfor(int i = 0; i < C; ++i) {\n \tresultStruct.result[i] = nondet_uint();\n\t\tassume(resultStruct.result[i] == result[i]);\n\t}\n\nreturn resultStruct;\n}\nint main(int argc, char ** argv)\n{\nunsigned int v1 = nondet_uint();\n\nunsigned int v2 = nondet_uint();\n\nunsigned int c = nondet_uint();\n\n    //initializing Vote VOTE_NUMBER\n    unsigned int V1 = nondet_uint();\n    assume(V1 >= 0);\n    assume(V1 < MAX_VOTERS);\n    unsigned int S1 = nondet_uint();\n    assume(S1 >= 0);\n    assume(S1 < MAX_SEATS);\n    unsigned int C1 = nondet_uint();\n    assume(C1 >= 0);\n    assume(C1 < MAX_CANDIDATES);\n    VoteStruct votes1;\n    votes1.amtVotes = nondet_uint();\n    assume(votes1.amtVotes == V1);\n    for (int i = 0; i < V1; ++i) {\n        for (int j = 0; j < C1; ++j) {\n            votes1.votes[i][j] = nondet_uint();\n            assume(votes1.votes[i][j] >= 0);\n            assume(votes1.votes[i][j] <= C1);\n        }\n    }\n    for (int i = V1; i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            votes1.votes[i][j] = nondet_uint();\n            assume(votes1.votes[i][j] == INVALID_VOTE);\n        }\n    }\n    for (int i = 0; i < V1; ++i) {\n        unsigned int tmp[MAX_CANDIDATES];\n        for (int k = 0; k < C1; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C1; ++j) {\n            for (int k = 0; k < C1; ++k) {\n                if (votes1.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n    //initializing Vote VOTE_NUMBER\n    unsigned int V2 = nondet_uint();\n    assume(V2 >= 0);\n    assume(V2 < MAX_VOTERS);\n    unsigned int S2 = nondet_uint();\n    assume(S2 >= 0);\n    assume(S2 < MAX_SEATS);\n    unsigned int C2 = nondet_uint();\n    assume(C2 >= 0);\n    assume(C2 < MAX_CANDIDATES);\n    VoteStruct votes2;\n    votes2.amtVotes = nondet_uint();\n    assume(votes2.amtVotes == V2);\n    for (int i = 0; i < V2; ++i) {\n        for (int j = 0; j < C2; ++j) {\n            votes2.votes[i][j] = nondet_uint();\n            assume(votes2.votes[i][j] >= 0);\n            assume(votes2.votes[i][j] <= C2);\n        }\n    }\n    for (int i = V2; i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            votes2.votes[i][j] = nondet_uint();\n            assume(votes2.votes[i][j] == INVALID_VOTE);\n        }\n    }\n    for (int i = 0; i < V2; ++i) {\n        unsigned int tmp[MAX_CANDIDATES];\n        for (int k = 0; k < C2; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C2; ++j) {\n            for (int k = 0; k < C2; ++k) {\n                if (votes2.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n    //initializing Vote VOTE_NUMBER\n    unsigned int V3 = nondet_uint();\n    assume(V3 >= 0);\n    assume(V3 < MAX_VOTERS);\n    unsigned int S3 = nondet_uint();\n    assume(S3 >= 0);\n    assume(S3 < MAX_SEATS);\n    unsigned int C3 = nondet_uint();\n    assume(C3 >= 0);\n    assume(C3 < MAX_CANDIDATES);\n    VoteStruct votes3;\n    votes3.amtVotes = nondet_uint();\n    assume(votes3.amtVotes == V3);\n    for (int i = 0; i < V3; ++i) {\n        for (int j = 0; j < C3; ++j) {\n            votes3.votes[i][j] = nondet_uint();\n            assume(votes3.votes[i][j] >= 0);\n            assume(votes3.votes[i][j] <= C3);\n        }\n    }\n    for (int i = V3; i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            votes3.votes[i][j] = nondet_uint();\n            assume(votes3.votes[i][j] == INVALID_VOTE);\n        }\n    }\n    for (int i = 0; i < V3; ++i) {\n        unsigned int tmp[MAX_CANDIDATES];\n        for (int k = 0; k < C3; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C3; ++j) {\n            for (int k = 0; k < C3; ++k) {\n                if (votes3.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n{\n// [[VOTES2,VOTES3]]==PERM(VOTES1);\n        VoteStruct voteSequence0;\n        voteSequence0.amtVotes = nondet_uint();\n        assume(voteSequence0.amtVotes == votes2.amtVotes + votes3.amtVotes);\n        unsigned int pos = 0;\n        for (unsigned int i = 0; i < votes2.amtVotes && i < MAX_VOTERS; ++pos) {\n            for (int j = 0; j < MAX_CANDIDATES; ++j) {\n                voteSequence0.votes[pos][j] = nondet_uint();\n                assume(voteSequence0.votes[pos][j] == votes2.votes[i][j]);\n            }\n            pos++;\n        }\n        for (unsigned int i = 0; i < votes3.amtVotes && i < MAX_VOTERS; ++pos) {\n            for (int j = 0; j < MAX_CANDIDATES; ++j) {\n                voteSequence0.votes[pos][j] = nondet_uint();\n                assume(voteSequence0.votes[pos][j] == votes3.votes[i][j]);\n            }\n            pos++;\n        }\n\n    VoteStruct votePermutation1;\n    votePermutation1.amtVotes = nondet_uint();\n    assume(votePermutation1.amtVotes == votes1.amtVotes);\n    unsigned int permutationIndices[MAX_VOTERS];\n    for (int i = 0; i < votes1.amtVotes && i < MAX_VOTERS; ++i) {\n        permutationIndices[i] = nondet_uint();\n        assume(permutationIndices[i] >= 0);\n        assume(permutationIndices[i] < votes1.amtVotes);\n    }\n    for (int i = 0; i < votes1.amtVotes - 1 && i < MAX_VOTERS; ++i) {\n        for (int j = i + 1; j < votes1.amtVotes && j < MAX_VOTERS; ++j) {\n            assume(permutationIndices[i] != permutationIndices[j]);\n        }\n    }\n    for (int i = 0; i < votes1.amtVotes - 1 && i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            assume(votePermutation1.votes[i][j] == votes1.votes[permutationIndices[i]][j]);\n        }\n    }\nunsigned int voteCompare2 = voteSequence0.amtVotes == votePermutation1.amtVotes;\nfor (int i = 0; i < voteSequence0.amtVotes; ++i) {\n    for (int j = 0; j < MAX_CANDIDATES; ++j) {\n        voteCompare2 &= voteSequence0.votes[i][j] == votePermutation1.votes[i][j];\n    }\n}\n\nassume(voteCompare2);\n\n}\n\nVoteResultStruct result1 = voting(votes1, V1, C1, S1);\n\nVoteResultStruct result2 = voting(votes2, V2, C2, S2);\n\nVoteResultStruct result3 = voting(votes3, V3, C3, S3);\n\n{\n// (!EMPTY(CUT(ELECT2,ELECT3)))==>(ELECT1==CUT(ELECT2,ELECT3));\nVoteResultStruct electIntersection0;\n{\n    unsigned int count = 0;\n    for (int i = 0; i < MAX_CANDIDATES; ++i) {\n        unsigned int eq = result2.result[i] == result3.result[i];\n        if (eq) {\n            electIntersection0.result[count] = nondet_uint();\n            assume(electIntersection0.result[count] == result2.result[i]);\n            count++;\n        }\n    }\n    electIntersection0.amtResult = nondet_uint();\n    assume(electIntersection0.amtResult == count);\n}\n\nunsigned int isEmptyelectIntersection01 = electIntersection0.amtResult == 0;\n\nunsigned int not2 = !isEmptyelectIntersection01;\nVoteResultStruct electIntersection3;\n{\n    unsigned int count = 0;\n    for (int i = 0; i < MAX_CANDIDATES; ++i) {\n        unsigned int eq = result2.result[i] == result3.result[i];\n        if (eq) {\n            electIntersection3.result[count] = nondet_uint();\n            assume(electIntersection3.result[count] == result2.result[i]);\n            count++;\n        }\n    }\n    electIntersection3.amtResult = nondet_uint();\n    assume(electIntersection3.amtResult == count);\n}\n\nunsigned int electCompare4 = result1.amtResult == electIntersection3.amtResult;\nfor (int i = 0; i < result1.amtResult; ++i) {\n    electCompare4 &= result1.result[i] == electIntersection3.result[i];\n}\n\nunsigned int combined5 = !not2 || electCompare4;\n\nassert(combined5);\n\n}\n\nreturn 0;\n}"}},"test_run_logs":""}],"min_voters":1}]}],"descr_files":["D:\\code\\eclipse-workspace-new\\BEAST\\beast\\saveFiles\\electionDescriptions\\borda.belec"],"code_gen_options":{"amount_voter_var_name":"MAX_VOTERS","amount_cands_var_name":"MAX_CANDIDATES","amount_seats_var_name":"MAX_SEATS"},"prop_descr_files":["D:\\code\\eclipse-workspace-new\\BEAST\\beast\\saveFiles\\propertyDescriptions\\reinforcement.bprp"]}