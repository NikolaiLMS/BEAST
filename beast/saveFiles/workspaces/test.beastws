{"test_config_list":[{"descr_uuid":"6d75bf93-a36c-4268-9d5d-b1a9b0564144","prop_descr_uuid":"1d99aabe-d827-462d-9525-065a7d41417e","name":"test_false","cbmc_test_config":[{"max_seats":3,"start_runs_on_creation":false,"descr_uuid":"6d75bf93-a36c-4268-9d5d-b1a9b0564144","prop_descr_uuid":"1d99aabe-d827-462d-9525-065a7d41417e","max_voters":3,"name":"test_false","max_cands":3,"min_cands":3,"min_seats":3,"test_runs":[{"amt_voter":3,"loop_bounds":" --unwindset main.0:4  --unwindset main.4:4  --unwindset main.6:4  --unwindset main.10:4  --unwindset voting.0:4  --unwindset voting.1:4  --unwind 4","amt_cands":3,"amt_seats":3,"code_gen_options":{"amount_voter_var_name":"MAX_VOTERS","amount_cands_var_name":"MAX_CANDIDATES","amount_seats_var_name":"MAX_SEATS"},"cbmc_code_file":{"cbmc_test_run_cbmc_file_path":"core/generated_c_files/5e9rjg8s7k3fqapa0377.c","cbmc_generated_code_info":{"code":"#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n\n\n#define assume(x) __CPROVER_assume(x)\n#define INVALID_VOTE 0xFFFFFFFE\n#define INVALID_RESULT 0xFFFFFFFE\n\n\n\n\n\n\ntypedef struct VoteStruct {\nunsigned int votes[MAX_VOTERS][MAX_CANDIDATES];\nunsigned int amtVotes;\n} VoteStruct;\n\ntypedef struct VoteResultStruct {\nunsigned int result;\nunsigned int amtResult;\n} VoteResultStruct;\n\n\n\nunsigned int nondet_uint();\nint nondet_int();\n\n\nVoteResultStruct voting(VoteStruct voteStruct, unsigned int V, unsigned int C, unsigned int S)\n{\n unsigned int votes[MAX_VOTERS][MAX_CANDIDATES];\n\tfor (int i = 0; i < V; ++i) {\n \tfor (int j = 0; j < C; ++j) {\n     \tvotes[i][j] = voteStruct.votes[i][j];\n     }\n }\nunsigned int result;\n//user generated code\n    result = 5;\n//end user generated code\n\tVoteResultStruct resultStruct;\n resultStruct.amtResult = nondet_uint();\n assume(resultStruct.amtResult == 1);\n resultStruct.result = nondet_uint();\n\tassume(resultStruct.result == result);\n\nreturn resultStruct;\n}\n\n\nint main(int argc, char ** argv)\n{\n    //initializing Vote 1\n    unsigned int V1 = nondet_uint();\n    assume(V1 <= MAX_VOTERS);\n    unsigned int S1 = nondet_uint();\n    assume(S1 <= MAX_SEATS);\n    unsigned int C1 = nondet_uint();\n    assume(C1 <= MAX_CANDIDATES);\n    VoteStruct votes1;\n    votes1.amtVotes = nondet_uint();\n    assume(votes1.amtVotes == V1);\n    for (int i = 0; i < V1; ++i) {\n        for (int j = 0; j < C1; ++j) {\n            votes1.votes[i][j] = nondet_uint();\n            assume(votes1.votes[i][j] >= 0);\n            assume(votes1.votes[i][j] <= C1);\n        }\n    }\n    for (int i = V1; i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            votes1.votes[i][j] = nondet_uint();\n            assume(votes1.votes[i][j] == INVALID_VOTE);\n        }\n    }\n    for (int i = 0; i < V1; ++i) {\n        unsigned int tmp[MAX_CANDIDATES];\n        for (int k = 0; k < C1; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C1; ++j) {\n            for (int k = 0; k < C1; ++k) {\n                if (votes1.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n    //initializing Vote 2\n    unsigned int V2 = nondet_uint();\n    assume(V2 <= MAX_VOTERS);\n    unsigned int S2 = nondet_uint();\n    assume(S2 <= MAX_SEATS);\n    unsigned int C2 = nondet_uint();\n    assume(C2 <= MAX_CANDIDATES);\n    VoteStruct votes2;\n    votes2.amtVotes = nondet_uint();\n    assume(votes2.amtVotes == V2);\n    for (int i = 0; i < V2; ++i) {\n        for (int j = 0; j < C2; ++j) {\n            votes2.votes[i][j] = nondet_uint();\n            assume(votes2.votes[i][j] >= 0);\n            assume(votes2.votes[i][j] <= C2);\n        }\n    }\n    for (int i = V2; i < MAX_VOTERS; ++i) {\n        for (int j = 0; j < MAX_CANDIDATES; ++j) {\n            votes2.votes[i][j] = nondet_uint();\n            assume(votes2.votes[i][j] == INVALID_VOTE);\n        }\n    }\n    for (int i = 0; i < V2; ++i) {\n        unsigned int tmp[MAX_CANDIDATES];\n        for (int k = 0; k < C2; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C2; ++j) {\n            for (int k = 0; k < C2; ++k) {\n                if (votes2.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n{\n// VOTES1==VOTES2;\nunsigned int voteCompare0 = votes1.amtVotes == votes2.amtVotes;\nfor (int i = 0; i < votes1.amtVotes; ++i) {\n    for (int j = 0; j < MAX_CANDIDATES; ++j) {\n        voteCompare0 &= votes1.votes[i][j] == votes2.votes[i][j];\n    }\n}\n\nassume(voteCompare0);\n\n}\n\nVoteResultStruct result1 = voting(votes1, V1, C1, S1);\n\nVoteResultStruct result2 = voting(votes2, V2, C2, S2);\n\n{\n// FALSE;\nassert(0);\n\n}\n\nreturn 0;\n}\n\n\n\n","generated_elect_var_name":[],"votes_list_member_var_name":"votes","result_amt_member_var_name":"amtResult","result_list_member_var_name":"result","generated_vote_var_name":[],"votes_amt_member_var_name":"amtVotes","var_name_to_info":{"votes1":"These are the assignments for vote number 1","result2":"These are the results of vote number 2","votes2":"These are the assignments for vote number 2","result1":"These are the results of vote number 1"},"elect_number_to_variable_name":{"result2":2,"result1":1},"vote_number_to_variable_name":{"votes1":1,"votes2":2}}},"state":"INITIALIZED","test_run_logs":""}],"min_voters":3}]}],"descr_files":["saveFiles/electionDescriptions/test.belec"],"code_gen_options":{"amount_voter_var_name":"MAX_VOTERS","amount_cands_var_name":"MAX_CANDIDATES","amount_seats_var_name":"MAX_SEATS"},"prop_descr_files":["saveFiles/propertyDescriptions/false.bprp"]}