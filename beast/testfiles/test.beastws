{"test_config_list":[{"descr_uuid":"49296f94-9541-402a-8976-9ce1324b762d","prop_descr_uuid":"b18f08db-82f3-46ae-8aee-af3f901c9e41","name":"test","cbmc_test_config":[{"max_seats":5,"start_runs_on_creation":false,"descr_uuid":"49296f94-9541-402a-8976-9ce1324b762d","prop_descr_uuid":"b18f08db-82f3-46ae-8aee-af3f901c9e41","max_voters":5,"name":"test five","max_cands":5,"min_cands":5,"min_seats":5,"test_runs":[{"amt_voter":5,"loop_bounds":[],"amt_cands":5,"amt_seats":5,"code_gen_options":{"amount_voter_var_name":"V","amount_cands_var_name":"C","amount_seats_var_name":"S"},"cbmc_code_file":{"cbmc_test_run_cbmc_file_path":"D:\\code\\eclipse-workspace\\BEAST\\BEAST\\beast\\core\\generated_c_files\\d7d0s7vn85pdsg5v2gtt.c","cbmc_generated_code_info":{"code":"#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#define assume(x) __CPROVER_assume(x)\ntypedef struct VoteStruct { Vote votes[V][C];\nunsigned int amtVotes; } VoteStruct;\ntypedef struct VoteResultStruct { unsigned int result[C];\nunsigned int amtResult; } VoteResultStruct;\nunsigned int nondet_uint();\nint nondet_int();\nVoteResultStruct voting(VoteStruct voteStruct)\n{\n unsigned int votes[V][C];\n\tfor (int i = 0; i < voteStruct.amtVotes; ++i) {\n \tfor (int j = 0; j < C; ++j) {\n     \tvotes[i][j] = voteStruct.votes[i][j];\n     }\n }\n//user generated code\n    unsigned int i = 0;\n    unsigned int j = 0;\n\n    for (i = 0; i < C; i++) {\n        result[i] = 0;\n    }\n    for (i = 0; i < V; i++) {\n        for (j = 0; j < C; j++) {\n            if (votes[i][j] < C) {\n                result[votes[i][j]] += (C - j) - 1;\n            }\n        }\n    }\n//end user generated code\n\tVoteResultStruct resultStruct;\n\tresultStruct.amtResult == nondet_uint();\n\tfor(int i = 0; i < C; ++i) {\n \tresultStruct.result[i] = nondet_uint();\n\t\tassume(resultStruct.result[i] == result[i]);\n\t}\n\n}\nint main(int argc, char ** argv)\n{\nunsigned int votesLowerBound = 0;\nunsigned int votesUpperBound = C;\nunsigned int v1 = nondet_uint();\n\nunsigned int v2 = nondet_uint();\n\nunsigned int c = nondet_uint();\n\nassume(c <= C);\n\nassume(c >= 0);\n\n//initializing vote1\n    VoteStruct vote1;\n    vote1.amtVotes = nondet_uint();\n    assume(vote1.amtVotes <= V);\n    for (int i = 0; i < vote1.amtVotes; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote1.votes[i][j] = nondet_uint();\n            assume(vote1.votes[i][j] >= votesLowerBound);\n            assume(vote1.votes[i][j] < votesUpperBound);\n        }\n    }\n    for (int i = vote1.amtVotes; i < V; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote1.votes[i][j] = nondet_uint();\n            assume(vote1.votes[i][j] == votesUpperBound);\n        }\n    }\n    for (int i = 0; i < vote1.amtVotes; ++i) {\n        unsigned int tmp[C];\n        for (int k = 0; k < C; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C; ++j) {\n            for (int k = 0; k < C; ++k) {\n                if (vote1.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n//initializing vote2\n    VoteStruct vote2;\n    vote2.amtVotes = nondet_uint();\n    assume(vote2.amtVotes <= V);\n    for (int i = 0; i < vote2.amtVotes; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote2.votes[i][j] = nondet_uint();\n            assume(vote2.votes[i][j] >= votesLowerBound);\n            assume(vote2.votes[i][j] < votesUpperBound);\n        }\n    }\n    for (int i = vote2.amtVotes; i < V; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote2.votes[i][j] = nondet_uint();\n            assume(vote2.votes[i][j] == votesUpperBound);\n        }\n    }\n    for (int i = 0; i < vote2.amtVotes; ++i) {\n        unsigned int tmp[C];\n        for (int k = 0; k < C; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C; ++j) {\n            for (int k = 0; k < C; ++k) {\n                if (vote2.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n//initializing vote3\n    VoteStruct vote3;\n    vote3.amtVotes = nondet_uint();\n    assume(vote3.amtVotes <= V);\n    for (int i = 0; i < vote3.amtVotes; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote3.votes[i][j] = nondet_uint();\n            assume(vote3.votes[i][j] >= votesLowerBound);\n            assume(vote3.votes[i][j] < votesUpperBound);\n        }\n    }\n    for (int i = vote3.amtVotes; i < V; ++i) {\n        for (int j = 0; j < C; ++j) {\n            vote3.votes[i][j] = nondet_uint();\n            assume(vote3.votes[i][j] == votesUpperBound);\n        }\n    }\n    for (int i = 0; i < vote3.amtVotes; ++i) {\n        unsigned int tmp[C];\n        for (int k = 0; k < C; ++k) {\n            tmp[k] = 0;\n        }\n        for (int j = 0; j < C; ++j) {\n            for (int k = 0; k < C; ++k) {\n                if (vote3.votes[i][j] == k) {\n                    assume(tmp[k] == 0);\n                    tmp[k] = 1;\n                }\n            }\n        }\n    }\n\n{\n// [[VOTES2,VOTES3]]==PERM(VOTES1);\n        VoteStruct voteSequence0;\n        voteSequence0.amtVotes = nondet_uint();\n        assume(voteSequence0.amtVotes == vote2.AMT_MEMBER + vote3.AMT_MEMBER);\n        unsigned int pos = 0;\n        for (unsigned int i = 0; i < vote2.amtVotes && i < V; ++pos) {\n            for (int j = 0; j < C; ++j) {\n                voteSequence0.votes[pos][j] = nondet_uint();\n                assume(voteSequence0.votes[pos][j] == vote2.votes[i][j]);\n            }\n            pos++;\n        }\n        for (unsigned int i = 0; i < vote3.amtVotes && i < V; ++pos) {\n            for (int j = 0; j < C; ++j) {\n                voteSequence0.votes[pos][j] = nondet_uint();\n                assume(voteSequence0.votes[pos][j] == vote3.votes[i][j]);\n            }\n            pos++;\n        }\n\n    VoteStruct votePermutation1;\n    votePermutation1.amtVotes = nondet_uint();\n    assume(votePermutation1.amtVotes == vote1.amtVotes);\n    unsigned int permutationIndices[V];\n    for (int i = 0; i < vote1.amtVotes && i < V; ++i) {\n        permutationIndices[i] = nondet_uint();\n        assume(permutationIndices[i] >= 0);\n        assume(permutationIndices[i] < vote1.amtVotes);\n    }\n    for (int i = 0; i < vote1.amtVotes - 1 && i < V; ++i) {\n        for (int j = i + 1; j < vote1.amtVotes && j < V; ++j) {\n            assume(permutationIndices[i] != permutationIndices[j]);\n        }\n    }\n    for (int i = 0; i < vote1.amtVotes - 1 && i < V; ++i) {\n        for (int j = 0; j < C; ++j) {\n            assume(votePermutation1.votes[i][j] == vote1.votes[permutationIndices[i]][j]);\n        }\n    }\nunsigned int voteCompare2 = voteSequence0.amtVotes == votePermutation1.amtVotes;\nfor (int i = 0; i < voteSequence0.amtVotes; ++i) {\n    for (int j = 0; j < C; ++j) {\n        voteCompare2 &= voteSequence0.votes[i][j] == votePermutation1.votes[i][j];\n    }\n}\n\nassume(voteCompare2);\n\n}\n\n//performing vote elect1\nVoteResultStruct elect1 = voting(vote1);\n\n//performing vote elect2\nVoteResultStruct elect2 = voting(vote2);\n\n//performing vote elect3\nVoteResultStruct elect3 = voting(vote3);\n\n{\n// (!EMPTY(CUT(ELECT2,ELECT3)))==>(ELECT1==CUT(ELECT2,ELECT3));\nVoteResultStruct electIntersection0;\n{\n    unsigned int count = 0;\n    for (int i = 0; i < C; ++i) {\n        unsigned int eq = elect2.LIST_MEMBER[i] == elect3.LIST_MEMBER[i];\n        if (eq) {\n            electIntersection0.result[count] = nondet_uint();\n            assume(electIntersection0.result[count] == elect2.result[i]);\n            count++;\n        }\n    }\n    electIntersection0.amtResult = nondet_uint();\n    assume(electIntersection0.amtResult == count);\n}\n\nunsigned int isEmptyelectIntersection01 = electIntersection0.amtResult == 0;\n\nunsigned int not2 = !isEmptyelectIntersection01;\nVoteResultStruct electIntersection3;\n{\n    unsigned int count = 0;\n    for (int i = 0; i < C; ++i) {\n        unsigned int eq = elect2.LIST_MEMBER[i] == elect3.LIST_MEMBER[i];\n        if (eq) {\n            electIntersection3.result[count] = nondet_uint();\n            assume(electIntersection3.result[count] == elect2.result[i]);\n            count++;\n        }\n    }\n    electIntersection3.amtResult = nondet_uint();\n    assume(electIntersection3.amtResult == count);\n}\n\nunsigned int electCompare4 = elect1.amtResult == electIntersection3.amtResult;\nfor (int i = 0; i < elect1.amtResult; ++i) {\n    electCompare4 &= elect1.result[i] == electIntersection3.result[i];\n}\n\nunsigned int combined5 = !not2 || electCompare4;\n\nassert(combined5);\n\n}\n\nreturn 0;\n}","vote_number_to_variable_name":{"0":"vote1","1":"vote2","2":"vote3"}}},"test_run_logs":""}],"min_voters":5}]}],"base_dir_file":"D:\\code\\eclipse-workspace\\BEAST\\BEAST\\beast","descr_files":["D:\\code\\eclipse-workspace\\BEAST\\BEAST\\beast\\testfiles\\borda.belec"],"code_gen_options":{"amount_voter_var_name":"V","amount_cands_var_name":"C","amount_seats_var_name":"S"},"prop_descr_files":["D:\\code\\eclipse-workspace\\BEAST\\BEAST\\beast\\testfiles\\reinforcement.bprp"]}