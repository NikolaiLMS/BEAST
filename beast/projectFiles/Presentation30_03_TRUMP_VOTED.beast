4 name29 Presentation30_03_TRUMP_VOTED8 elecDesc2105 4 name4 FPTP14 votingDeclLine2 334 code2005 #include <stdlib.h>
//Single-choice: Wähler stimmt jeweils für einen Kandidaten
//Kandidat oder unentschieden: Ein gewählter Kandidat oder unentschieden

int findMaxCand(unsigned int distVotes[], int size) {
        int maxIndex = 0;
        int maxValue = 0;
        
        for(unsigned int i = 0; i < size; ++i) {
                if (distVotes[i] > maxValue) {
                        maxIndex = i;
                        maxValue = distVotes[i];
                }
        }
        return maxIndex;
}

int voteDistrict(int index, int offset, int amountVotes, unsigned int votes[V]) {
        unsigned int distVotes[C];
        
        for(unsigned int i = 0; i < C; ++i) {
                distVotes[i] = 0;
        }
        
        for(unsigned int i = 0; i < amountVotes; ++i) {
                distVotes[votes[(index * offset) + i]]++;
        }
        
        return findMaxCand(distVotes, C);
}

int maxDistricts = 50;

unsigned int voting(unsigned int votes[V]) { 
         int amountDistricts = min(V, maxDistricts);
        int votesPerDistrict = V / amountDistricts;
        
        int *districts = malloc(amountDistricts * sizeof(int));
        
        int alreadyVoted = 0;
        
        //we go though all districts except the last one
        for(unsigned int i = 0; i < amountDistricts - 1; ++i) {
                districts[i] = voteDistrict(i, votesPerDistrict, votesPerDistrict, votes);
                alreadyVoted = alreadyVoted + votesPerDistrict;
        }
        
        //put all remaining votes in the last district
        districts[amountDistricts - 1] = voteDistrict(amountDistricts - 1,
                                                       votesPerDistrict, (V - alreadyVoted), votes);
        
        
        int summedUp[C];

        for (unsigned int i = 0; i < C; ++i) {
	summedUp[i] = 0;
        }

        for (unsigned int i = 0; i < amountDistricts; ++i) {
	summedUp[districts[i]]++;
        }
        
        return findMaxCand(summedUp, C);

} 
9 inputType13 SINGLE_CHOICE10 outputType13 CAND_OR_UNDEF8 propList1494 <propertyListName>
New PropertyList
</propertyListName>
<propertyItem>
<postAndPreProps>
4 name14 USelection20163 pre352 VOTE_SUM_FOR_CANDIDATE1(Hillary) >> (V / 2);
VOTE_SUM_FOR_CANDIDATE1(Trump) < VOTE_SUM_FOR_CANDIDATE1(Hillary);
VOTE_SUM_FOR_CANDIDATE1(Stein) < VOTE_SUM_FOR_CANDIDATE1(Trump);
VOTE_SUM_FOR_CANDIDATE1(Johnson) < VOTE_SUM_FOR_CANDIDATE1(Stein);
Hillary != Trump;
Hillary != Johnson;
Hillary != Stein;
Trump != Johnson;
Trump != Stein;
Johnson != Stein;
4 post18 ELECT1 == Hillary;7 varlist188 symbolic_variable: id: Trump type: CANDIDATE;
symbolic_variable: id: Hillary type: CANDIDATE;
symbolic_variable: id: Stein type: CANDIDATE;
symbolic_variable: id: Johnson type: CANDIDATE;

</postAndPreProps>
<testStatus>
true
</testStatus>

</propertyItem>
<propertyItem>
<postAndPreProps>
4 name25 USelection2016_100Percent3 pre351 VOTE_SUM_FOR_CANDIDATE1(Hillary) >>= (V);
VOTE_SUM_FOR_CANDIDATE1(Trump) < VOTE_SUM_FOR_CANDIDATE1(Hillary);
VOTE_SUM_FOR_CANDIDATE1(Stein) <= VOTE_SUM_FOR_CANDIDATE1(Trump);
VOTE_SUM_FOR_CANDIDATE1(Johnson) <= VOTE_SUM_FOR_CANDIDATE1(Stein);
Hillary != Trump;
Hillary != Johnson;
Hillary != Stein;
Trump != Johnson;
Trump != Stein;
Johnson != Stein;
4 post18 ELECT1 == Hillary;7 varlist188 symbolic_variable: id: Trump type: CANDIDATE;
symbolic_variable: id: Hillary type: CANDIDATE;
symbolic_variable: id: Stein type: CANDIDATE;
symbolic_variable: id: Johnson type: CANDIDATE;

</postAndPreProps>
<testStatus>
true
</testStatus>

</propertyItem>
19 electionCheckParams392 <amountVotersMin>
200
</amountVotersMin>
<amountVotersMax>
200
</amountVotersMax>
<amountCandidatesMin>
4
</amountCandidatesMin>
<amountCandidatesMax>
4
</amountCandidatesMax>
<amountSeatsMin>
3
</amountSeatsMin>
<amountSeatsMax>
3
</amountSeatsMax>
<timeout>
<duration>
0
</duration>
<timeunit>
SECONDS
</timeunit>

</timeout>
<processes>
0
</processes>
<argument>
--unwind 210;
</argument>
