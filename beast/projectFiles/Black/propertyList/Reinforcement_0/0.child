{"propertyName":"Verification ","checkBoxStatus":true,"disabled":false,"results":[{"type":"CBMCResult","properties":{"createsExample":true,"segmentEnder":"-----------------------------------","SUCCESSLINE":"VERIFICATION SUCCESSFUL","FAILURELINE":"VERIFICATION FAILED","valid":false,"finished":true,"error":["hrjn4cts0rn02m79bln2.c","foo.c","file C:\\Users\\lukas\\Documents\\GitHub\\BEAST\\beast\\core\\generated_c_files\\hrjn4cts0rn02m79bln2.c line 515 function main: function `voting\u0027 is not declared","file C:\\Users\\lukas\\Documents\\GitHub\\BEAST\\beast\\core\\generated_c_files\\hrjn4cts0rn02m79bln2.c line 515 function main: in expression `voting((const void *)votes1)\u0027:","conversion from `signed int\u0027 to `struct candidateList_result\u0027: implicit conversion not permitted","CONVERSION ERROR"],"timeOut":false,"success":false,"hasSubResult":false,"numVoters":0,"numSeats":0,"numCandidates":0,"electionDescription":{"name":"Copeland choice","code":["struct candidateList_result condorcet_voting (unsigned int votes[V][C]) {","    struct candidateList_result r;","    unsigned int i \u003d 0;","    unsigned int j \u003d 0;","    int ci \u003d 0;","    int cj \u003d 0;","    unsigned int found \u003d 0;","    unsigned int k \u003d 0;","    unsigned int l \u003d 0;","    int score[C][C]; // 1, 0 or -1","    int condorcet[C];","","    for (i \u003d 0; i \u003c C; i++) {","        r.arr[i] \u003d 0;","    }","    for (i \u003d 0; i \u003c C; i++) {","        for (j \u003d 0; j \u003c C; j++) {","            score[i][j] \u003d 0;","        }","        condorcet[i] \u003d 0;","    }","","    for (i \u003d 0; i \u003c C; i++) {","        for (j \u003d 0; j \u003c C; j++) {","            ci \u003d 0;","            cj \u003d 0;","            for (k \u003d 0; k \u003c V \u0026\u0026 i !\u003d j; k++) {","                found \u003d 0;","                for (l \u003d 0; l \u003c C; l++) {","                    if (!found \u0026\u0026 votes[k][l] \u003d\u003d i) {","                        ci++;","                        cj--;","                        found \u003d 1;","                    } else if (!found \u0026\u0026 votes[k][l] \u003d\u003d j) {","                        cj++;","                        ci--;","                        found \u003d 1;","                    }","                }","            }","            if (ci \u003c cj) {","                score[i][j] \u003d -1;","            } else if (cj \u003c ci) {","                score[i][j] \u003d 1;","            }","        }","    }","","    for (i \u003d 0; i \u003c C; i++) {","        condorcet[i] \u003d 1;","        for (j \u003d 0; j \u003c C; j++) {","            if (i !\u003d j \u0026\u0026 score[i][j] !\u003d 1) {","                condorcet[i] \u003d 0;","            }","        }","    }","","    int max \u003d 0;","    for (i \u003d 0; i \u003c C; i++) {","        if (max \u003c condorcet[i]) {","            max \u003d condorcet[i];","            for (j \u003d 0; j \u003c C; j++) {","                r.arr[j] \u003d 0;","            }","            r.arr[i] \u003d 1;","        } else if (max \u003d\u003d condorcet[i]) {","            r.arr[i] \u003d 1;","        }","    }","    return r;","}","","struct candidateList_result borda_voting(unsigned int votes[V][C]) {","    struct candidateList_result r;","    unsigned int res[C];","    unsigned int i \u003d 0;","    unsigned int j \u003d 0;","","    for (i \u003d 0; i \u003c C; i++) {","        r.arr[i] \u003d 1;","    }","    for (i \u003d 0; i \u003c C; i++) {","        res[i] \u003d 0;","    }","    for (i \u003d 0; i \u003c V; i++) {","        for (j \u003d 0; j \u003c C; j++) {","            if (votes[i][j] \u003c C) {","                res[votes[i][j]] +\u003d (C - j) - 1;","            }","        }","    }","    unsigned int max \u003d 0;","    for (i \u003d 0; i \u003c C; i++) {","        if (max \u003c res[i]) {","            max \u003d res[i];","            for (j \u003d 0; j \u003c C; j++) {","                r.arr[j] \u003d 0;","            }","            r.arr[i] \u003d 1;","        } else if (max \u003d\u003d res[i]) {","            r.arr[i] \u003d 1;","        }","    }","    return r;","}","","struct candidateList_result election_function(unsigned int votes[V][C]) {","    unsigned int i \u003d 0;","    unsigned int cnt \u003d 0;","","    struct candidateList_result r \u003d condorcet_voting(votes);","    for (i \u003d 0; i \u003c C; i++) {","        if (r.arr[i] \u003d\u003d 1) {","            cnt++;","        }","    }","","    if (cnt \u003d\u003d 1) {","        return r;","    } else {","        return borda_voting(votes);","    }","}"],"container":{"inType":{"type":"Preference","properties":{"sizes":["V","C"],"helper":{"type":"CbmcHelpMethods","properties":{"segmentEnder":"-----------------------------------"}}}},"outType":{"type":"CandidateList","properties":{"helper":{"type":"CbmcHelpMethods","properties":{"segmentEnder":"-----------------------------------"}}}}},"votingDeclLine":0},"property":{"name":"Reinforcement","symbolicVariableList":{"symbolicVariableList":[]},"preConditionsDescription":{"code":"(VOTES2, VOTES3) \u003c- SPLIT(PERM(VOTES1));"},"postConditionsDescription":{"code":"NOTEMPTY(INTERSECT(ELECT2, ELECT3)) \u003d\u003d\u003e ELECT1 \u003d\u003d INTERSECT(ELECT2, ELECT3);"},"boundedVarDescription":{"code":""}},"forcefulleStopped":false,"hasMargin":false,"finalMargin":-1,"isMarginComp":false}}]}