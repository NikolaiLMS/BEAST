4 name10 FPTP_FULL314 votingDeclLine2 324 code1808 #include <stdlib.h>
//Single-choice: Wähler stimmt jeweils für einen Kandidaten
//Kandidat oder unentschieden: Ein gewählter Kandidat oder unentschieden

int voteDistrict(int index, int offset, int amountVotes, unsigned int votes[V]) {
        unsigned int distVotes[C];
        
        for(unsigned int i = 0; i < C; ++i) {
                distVotes[i] = 0;
        }
        
        for(unsigned int i = 0; i < amountVotes; ++i) {
                distVotes[votes[(index * offset) + i]]++;
        }
        
        return findMaxCand(distVotes, C);
}

int findMaxCand(unsigned int distVotes[], int size) {
        int maxIndex = 0;
        int maxValue = 0;
        
        for(unsigned int i = 0; i < size; ++i) {
                if (distVotes[i] > maxValue) {
                        maxIndex = i;
                        maxValue = distVotes[i];
                }
        }
        return maxIndex;
}

int maxDistricts = 50;
unsigned int voting(unsigned int votes[V]) { 
        int amountDistricts = min(V, maxDistricts);
        int votesPerDistrict = V / amountDistricts;
        
        int *districts = malloc(amountDistricts * sizeof(int));
        
        int alreadyVoted = 0;
        
        //we go though all districts except the last one
        for(unsigned int i = 0; i < amountDistricts - 1; ++i) {
                districts[i] = voteDistrict(i, votesPerDistrict, votesPerDistrict, votes);
                alreadyVoted = alreadyVoted + votesPerDistrict;
        }
        
        //put all remaining votes in the last district
        districts[amountDistricts - 1] = voteDistrict(amountDistricts - 1,
                                                       votesPerDistrict, (V - alreadyVoted), votes);
        
        
        return findMaxCand(districts, amountDistricts); 
}
9 inputType13 SINGLE_CHOICE10 outputType13 CAND_OR_UNDEF